/*
========================================================================================
    fmalmeida/bacannot Nextflow config file
========================================================================================
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// loading required / default pipeline parameters
includeConfig 'conf/defaults.config'

// Global default params, used in configs
params {

    // Boilerplate options
    tracedir                   = "${params.output}/pipeline_info"
    plaintext_email            = false
    monochrome_logs            = false
    help                       = false
    get_config                 = false
    get_samplesheet            = false
    validate_params            = true
    show_hidden_params         = false
    schema_ignore_params       = 'enable_conda,monochrome_logs,plaintext_email'
    enable_conda               = false
    monochrome_logs            = false

    // Config options
    custom_config_version      = 'master'
    custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_description = null
    config_profile_contact     = null
    config_profile_url         = null
    config_profile_name        = null

}

// Load base.config (contains some label resources configurarion)
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

/*
                                    Setting up NF profiles
                            To use different profiles and executors
            please read more at: https://www.nextflow.io/docs/latest/config.html#config-profiles
 */
profiles {
    standard    { includeConfig 'conf/standard.config'                   }
    test        { includeConfig 'conf/test_profile.config'               }
    quicktest   { includeConfig 'conf/small_dataset_test_profile.config' }
    docker      { includeConfig 'conf/docker.config'                     }
    singularity { includeConfig 'conf/singularity.config'                }
    awsBatch    { includeConfig 'conf/aws.config'                        }
    // conda { includeConfig 'conf/conda.config' }
    // gls { includeConfig 'conf/gcp.config' }
    // azureBatch { includeConfig 'conf/azure.config' }
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container. 
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/bacannot_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/bacannot_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/bacannot_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/bacannot_pipeline_dag_${trace_timestamp}.svg"
}

/*
                                    Adding manifest
*/
manifest {
    name            = "fmalmeida/bacannot"
    author          = "Felipe Almeida"
    description     = "Nextflow pipeline for bacterial genome annotation"
    homePage        = "https://github.com/fmalmeida/bacannot"
    mainScript      = "main.nf"
    nextflowVersion = ">=20.10.0"
    version         = '3.1.3'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
