process {

    // The defaults for all processes
    cpus   = { params.max_cpus   }
    memory = { params.max_memory }
    time   = { params.max_time   }

    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'

    // labels
    withLabel:process_ultralow {
        cpus   = { check_max( 1 * task.attempt, 'cpus' )      }
        memory = { check_max( 2.GB * task.attempt, 'memory' ) }
        time   = { check_max( 1.h * task.attempt, 'time' )    }
    }
    withLabel:process_low {
        cpus   = { check_max( 2 * task.attempt, 'cpus' )      }
        memory = { check_max( 4.GB * task.attempt, 'memory' ) }
        time   = { check_max( 1.h * task.attempt, 'time' )    }
    }
    withLabel:process_medium {
        cpus   = { check_max( 4 * task.attempt, 'cpus' )       }
        memory = { check_max( 10.GB * task.attempt, 'memory' ) }
        time   = { check_max( 8.h * task.attempt, 'time' )     }
    }
    withLabel:process_high {
        cpus   = { check_max( 8 * task.attempt, 'cpus' )       }
        memory = { check_max( 14.GB * task.attempt, 'memory' ) }
        time   = { check_max( 16.h * task.attempt, 'time' )    }
    }
    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
    }

}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}